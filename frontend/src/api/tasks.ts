/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API
 * The API description
 * OpenAPI spec version: 1.0
 */
import {
    useMutation,
    useQuery
} from '@tanstack/react-query';
import type {
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult
} from '@tanstack/react-query';

import type {
    CreateTaskDto,
    ErrorResponseDto,
    String,
    TaskResponseDto
} from './schemas';

import {customInstance} from './config';


type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


export const createTask = (
    createTaskDto: CreateTaskDto,
    options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {


    return customInstance<String>(
        {
            url: `/api/tasks`, method: 'POST',
            headers: {'Content-Type': 'application/json',},
            data: createTaskDto, signal
        },
        options);
}


export const getCreateTaskMutationOptions = <TError = ErrorResponseDto,
    TContext = unknown>(options?: {
                            mutation?: UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError, { data: CreateTaskDto }, TContext>,
                            request?: SecondParameter<typeof customInstance>
                        }
): UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError, { data: CreateTaskDto }, TContext> => {

    const mutationKey = ['createTask'];
    const {mutation: mutationOptions, request: requestOptions} = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : {...options, mutation: {...options.mutation, mutationKey}}
        : {mutation: {mutationKey,}, request: undefined};


    const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTask>>, { data: CreateTaskDto }> = (props) => {
        const {data} = props ?? {};

        return createTask(data, requestOptions)
    }


    return {mutationFn, ...mutationOptions}
}

export type CreateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof createTask>>>
export type CreateTaskMutationBody = CreateTaskDto
export type CreateTaskMutationError = ErrorResponseDto

export const useCreateTask = <TError = ErrorResponseDto,
    TContext = unknown>(options?: {
                            mutation?: UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError, { data: CreateTaskDto }, TContext>,
                            request?: SecondParameter<typeof customInstance>
                        }
): UseMutationResult<
    Awaited<ReturnType<typeof createTask>>,
    TError,
    { data: CreateTaskDto },
    TContext
> => {

    const mutationOptions = getCreateTaskMutationOptions(options);

    return useMutation(mutationOptions);
}
export const findAllTasks = (
    options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {


    return customInstance<TaskResponseDto[]>(
        {
            url: `/api/tasks`, method: 'GET', signal
        },
        options);
}


export const getFindAllTasksQueryKey = () => {
    return [`/api/tasks`] as const;
}


export const getFindAllTasksQueryOptions = <TData = Awaited<ReturnType<typeof findAllTasks>>, TError = ErrorResponseDto>(options?: {
                                                                                                                             query?: UseQueryOptions<Awaited<ReturnType<typeof findAllTasks>>, TError, TData>,
                                                                                                                             request?: SecondParameter<typeof customInstance>
                                                                                                                         }
) => {

    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getFindAllTasksQueryKey();


    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllTasks>>> = ({signal}) => findAllTasks(requestOptions, signal);


    return {
        queryKey,
        queryFn, ...queryOptions
    } as UseQueryOptions<Awaited<ReturnType<typeof findAllTasks>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllTasksQueryResult = NonNullable<Awaited<ReturnType<typeof findAllTasks>>>
export type FindAllTasksQueryError = ErrorResponseDto


export function useFindAllTasks<TData = Awaited<ReturnType<typeof findAllTasks>>, TError = ErrorResponseDto>(
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof findAllTasks>>, TError, TData>,
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {

    const queryOptions = getFindAllTasksQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}


export const findAllNestedTasks = (
    options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {


    return customInstance<TaskResponseDto[]>(
        {
            url: `/api/tasks/tree`, method: 'GET', signal
        },
        options);
}


export const getFindAllNestedTasksQueryKey = () => {
    return [`/api/tasks/tree`] as const;
}


export const getFindAllNestedTasksQueryOptions = <TData = Awaited<ReturnType<typeof findAllNestedTasks>>, TError = ErrorResponseDto>(options?: {
                                                                                                                                         query?: UseQueryOptions<Awaited<ReturnType<typeof findAllNestedTasks>>, TError, TData>,
                                                                                                                                         request?: SecondParameter<typeof customInstance>
                                                                                                                                     }
) => {

    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getFindAllNestedTasksQueryKey();


    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllNestedTasks>>> = ({signal}) => findAllNestedTasks(requestOptions, signal);


    return {
        queryKey,
        queryFn, ...queryOptions
    } as UseQueryOptions<Awaited<ReturnType<typeof findAllNestedTasks>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllNestedTasksQueryResult = NonNullable<Awaited<ReturnType<typeof findAllNestedTasks>>>
export type FindAllNestedTasksQueryError = ErrorResponseDto


export function useFindAllNestedTasks<TData = Awaited<ReturnType<typeof findAllNestedTasks>>, TError = ErrorResponseDto>(
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof findAllNestedTasks>>, TError, TData>,
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {

    const queryOptions = getFindAllNestedTasksQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}


export const findTask = (
    id: number,
    options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {


    return customInstance<TaskResponseDto>(
        {
            url: `/api/tasks/${id}`, method: 'GET', signal
        },
        options);
}


export const getFindTaskQueryKey = (id: number,) => {
    return [`/api/tasks/${id}`] as const;
}


export const getFindTaskQueryOptions = <TData = Awaited<ReturnType<typeof findTask>>, TError = ErrorResponseDto>(id: number, options?: {
                                                                                                                     query?: UseQueryOptions<Awaited<ReturnType<typeof findTask>>, TError, TData>,
                                                                                                                     request?: SecondParameter<typeof customInstance>
                                                                                                                 }
) => {

    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getFindTaskQueryKey(id);


    const queryFn: QueryFunction<Awaited<ReturnType<typeof findTask>>> = ({signal}) => findTask(id, requestOptions, signal);


    return {
        queryKey,
        queryFn,
        enabled: !!(id), ...queryOptions
    } as UseQueryOptions<Awaited<ReturnType<typeof findTask>>, TError, TData> & { queryKey: QueryKey }
}

export type FindTaskQueryResult = NonNullable<Awaited<ReturnType<typeof findTask>>>
export type FindTaskQueryError = ErrorResponseDto


export function useFindTask<TData = Awaited<ReturnType<typeof findTask>>, TError = ErrorResponseDto>(
    id: number, options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof findTask>>, TError, TData>,
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {

    const queryOptions = getFindTaskQueryOptions(id, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}


export const findSubtasks = (
    id: number,
    options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {


    return customInstance<TaskResponseDto[]>(
        {
            url: `/api/tasks/${id}/subtasks`, method: 'GET', signal
        },
        options);
}


export const getFindSubtasksQueryKey = (id: number,) => {
    return [`/api/tasks/${id}/subtasks`] as const;
}


export const getFindSubtasksQueryOptions = <TData = Awaited<ReturnType<typeof findSubtasks>>, TError = ErrorResponseDto>(id: number, options?: {
                                                                                                                             query?: UseQueryOptions<Awaited<ReturnType<typeof findSubtasks>>, TError, TData>,
                                                                                                                             request?: SecondParameter<typeof customInstance>
                                                                                                                         }
) => {

    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getFindSubtasksQueryKey(id);


    const queryFn: QueryFunction<Awaited<ReturnType<typeof findSubtasks>>> = ({signal}) => findSubtasks(id, requestOptions, signal);


    return {
        queryKey,
        queryFn,
        enabled: !!(id), ...queryOptions
    } as UseQueryOptions<Awaited<ReturnType<typeof findSubtasks>>, TError, TData> & { queryKey: QueryKey }
}

export type FindSubtasksQueryResult = NonNullable<Awaited<ReturnType<typeof findSubtasks>>>
export type FindSubtasksQueryError = ErrorResponseDto


export function useFindSubtasks<TData = Awaited<ReturnType<typeof findSubtasks>>, TError = ErrorResponseDto>(
    id: number, options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof findSubtasks>>, TError, TData>,
        request?: SecondParameter<typeof customInstance>
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {

    const queryOptions = getFindSubtasksQueryOptions(id, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}



